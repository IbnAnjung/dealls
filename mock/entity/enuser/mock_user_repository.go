// Code generated by mockery v2.43.2. DO NOT EDIT.

package enuser

import (
	context "context"

	enuser "github.com/IbnAnjung/dealls/entity/enuser"
	mock "github.com/stretchr/testify/mock"
)

// MockUserRepository is an autogenerated mock type for the UserRepository type
type MockUserRepository struct {
	mock.Mock
}

type MockUserRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserRepository) EXPECT() *MockUserRepository_Expecter {
	return &MockUserRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, u
func (_m *MockUserRepository) Create(ctx context.Context, u *enuser.User) error {
	ret := _m.Called(ctx, u)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *enuser.User) error); ok {
		r0 = rf(ctx, u)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUserRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockUserRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - u *enuser.User
func (_e *MockUserRepository_Expecter) Create(ctx interface{}, u interface{}) *MockUserRepository_Create_Call {
	return &MockUserRepository_Create_Call{Call: _e.mock.On("Create", ctx, u)}
}

func (_c *MockUserRepository_Create_Call) Run(run func(ctx context.Context, u *enuser.User)) *MockUserRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*enuser.User))
	})
	return _c
}

func (_c *MockUserRepository_Create_Call) Return(_a0 error) *MockUserRepository_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUserRepository_Create_Call) RunAndReturn(run func(context.Context, *enuser.User) error) *MockUserRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// FindById provides a mock function with given fields: ctx, id
func (_m *MockUserRepository) FindById(ctx context.Context, id string) (enuser.User, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for FindById")
	}

	var r0 enuser.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (enuser.User, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) enuser.User); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(enuser.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserRepository_FindById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindById'
type MockUserRepository_FindById_Call struct {
	*mock.Call
}

// FindById is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockUserRepository_Expecter) FindById(ctx interface{}, id interface{}) *MockUserRepository_FindById_Call {
	return &MockUserRepository_FindById_Call{Call: _e.mock.On("FindById", ctx, id)}
}

func (_c *MockUserRepository_FindById_Call) Run(run func(ctx context.Context, id string)) *MockUserRepository_FindById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUserRepository_FindById_Call) Return(user enuser.User, err error) *MockUserRepository_FindById_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *MockUserRepository_FindById_Call) RunAndReturn(run func(context.Context, string) (enuser.User, error)) *MockUserRepository_FindById_Call {
	_c.Call.Return(run)
	return _c
}

// FindByIds provides a mock function with given fields: ctx, id
func (_m *MockUserRepository) FindByIds(ctx context.Context, id []string) ([]enuser.User, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for FindByIds")
	}

	var r0 []enuser.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []string) ([]enuser.User, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []string) []enuser.User); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]enuser.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserRepository_FindByIds_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByIds'
type MockUserRepository_FindByIds_Call struct {
	*mock.Call
}

// FindByIds is a helper method to define mock.On call
//   - ctx context.Context
//   - id []string
func (_e *MockUserRepository_Expecter) FindByIds(ctx interface{}, id interface{}) *MockUserRepository_FindByIds_Call {
	return &MockUserRepository_FindByIds_Call{Call: _e.mock.On("FindByIds", ctx, id)}
}

func (_c *MockUserRepository_FindByIds_Call) Run(run func(ctx context.Context, id []string)) *MockUserRepository_FindByIds_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]string))
	})
	return _c
}

func (_c *MockUserRepository_FindByIds_Call) Return(user []enuser.User, err error) *MockUserRepository_FindByIds_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *MockUserRepository_FindByIds_Call) RunAndReturn(run func(context.Context, []string) ([]enuser.User, error)) *MockUserRepository_FindByIds_Call {
	_c.Call.Return(run)
	return _c
}

// FindUserByUsername provides a mock function with given fields: ctx, username
func (_m *MockUserRepository) FindUserByUsername(ctx context.Context, username string) (enuser.User, error) {
	ret := _m.Called(ctx, username)

	if len(ret) == 0 {
		panic("no return value specified for FindUserByUsername")
	}

	var r0 enuser.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (enuser.User, error)); ok {
		return rf(ctx, username)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) enuser.User); ok {
		r0 = rf(ctx, username)
	} else {
		r0 = ret.Get(0).(enuser.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserRepository_FindUserByUsername_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindUserByUsername'
type MockUserRepository_FindUserByUsername_Call struct {
	*mock.Call
}

// FindUserByUsername is a helper method to define mock.On call
//   - ctx context.Context
//   - username string
func (_e *MockUserRepository_Expecter) FindUserByUsername(ctx interface{}, username interface{}) *MockUserRepository_FindUserByUsername_Call {
	return &MockUserRepository_FindUserByUsername_Call{Call: _e.mock.On("FindUserByUsername", ctx, username)}
}

func (_c *MockUserRepository_FindUserByUsername_Call) Run(run func(ctx context.Context, username string)) *MockUserRepository_FindUserByUsername_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUserRepository_FindUserByUsername_Call) Return(u enuser.User, err error) *MockUserRepository_FindUserByUsername_Call {
	_c.Call.Return(u, err)
	return _c
}

func (_c *MockUserRepository_FindUserByUsername_Call) RunAndReturn(run func(context.Context, string) (enuser.User, error)) *MockUserRepository_FindUserByUsername_Call {
	_c.Call.Return(run)
	return _c
}

// FindUsers provides a mock function with given fields: ctx, gender, excludeUserIds
func (_m *MockUserRepository) FindUsers(ctx context.Context, gender uint8, excludeUserIds []string) (enuser.User, error) {
	ret := _m.Called(ctx, gender, excludeUserIds)

	if len(ret) == 0 {
		panic("no return value specified for FindUsers")
	}

	var r0 enuser.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint8, []string) (enuser.User, error)); ok {
		return rf(ctx, gender, excludeUserIds)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint8, []string) enuser.User); ok {
		r0 = rf(ctx, gender, excludeUserIds)
	} else {
		r0 = ret.Get(0).(enuser.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint8, []string) error); ok {
		r1 = rf(ctx, gender, excludeUserIds)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserRepository_FindUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindUsers'
type MockUserRepository_FindUsers_Call struct {
	*mock.Call
}

// FindUsers is a helper method to define mock.On call
//   - ctx context.Context
//   - gender uint8
//   - excludeUserIds []string
func (_e *MockUserRepository_Expecter) FindUsers(ctx interface{}, gender interface{}, excludeUserIds interface{}) *MockUserRepository_FindUsers_Call {
	return &MockUserRepository_FindUsers_Call{Call: _e.mock.On("FindUsers", ctx, gender, excludeUserIds)}
}

func (_c *MockUserRepository_FindUsers_Call) Run(run func(ctx context.Context, gender uint8, excludeUserIds []string)) *MockUserRepository_FindUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint8), args[2].([]string))
	})
	return _c
}

func (_c *MockUserRepository_FindUsers_Call) Return(user enuser.User, err error) *MockUserRepository_FindUsers_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *MockUserRepository_FindUsers_Call) RunAndReturn(run func(context.Context, uint8, []string) (enuser.User, error)) *MockUserRepository_FindUsers_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, user
func (_m *MockUserRepository) Update(ctx context.Context, user *enuser.User) error {
	ret := _m.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *enuser.User) error); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUserRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockUserRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - user *enuser.User
func (_e *MockUserRepository_Expecter) Update(ctx interface{}, user interface{}) *MockUserRepository_Update_Call {
	return &MockUserRepository_Update_Call{Call: _e.mock.On("Update", ctx, user)}
}

func (_c *MockUserRepository_Update_Call) Run(run func(ctx context.Context, user *enuser.User)) *MockUserRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*enuser.User))
	})
	return _c
}

func (_c *MockUserRepository_Update_Call) Return(err error) *MockUserRepository_Update_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockUserRepository_Update_Call) RunAndReturn(run func(context.Context, *enuser.User) error) *MockUserRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateLikeCount provides a mock function with given fields: ctx, userID, sType
func (_m *MockUserRepository) UpdateLikeCount(ctx context.Context, userID string, sType enuser.SwipeType) error {
	ret := _m.Called(ctx, userID, sType)

	if len(ret) == 0 {
		panic("no return value specified for UpdateLikeCount")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, enuser.SwipeType) error); ok {
		r0 = rf(ctx, userID, sType)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUserRepository_UpdateLikeCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateLikeCount'
type MockUserRepository_UpdateLikeCount_Call struct {
	*mock.Call
}

// UpdateLikeCount is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
//   - sType enuser.SwipeType
func (_e *MockUserRepository_Expecter) UpdateLikeCount(ctx interface{}, userID interface{}, sType interface{}) *MockUserRepository_UpdateLikeCount_Call {
	return &MockUserRepository_UpdateLikeCount_Call{Call: _e.mock.On("UpdateLikeCount", ctx, userID, sType)}
}

func (_c *MockUserRepository_UpdateLikeCount_Call) Run(run func(ctx context.Context, userID string, sType enuser.SwipeType)) *MockUserRepository_UpdateLikeCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(enuser.SwipeType))
	})
	return _c
}

func (_c *MockUserRepository_UpdateLikeCount_Call) Return(err error) *MockUserRepository_UpdateLikeCount_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockUserRepository_UpdateLikeCount_Call) RunAndReturn(run func(context.Context, string, enuser.SwipeType) error) *MockUserRepository_UpdateLikeCount_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUserRepository creates a new instance of MockUserRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserRepository {
	mock := &MockUserRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
