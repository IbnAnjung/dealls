// Code generated by mockery v2.43.2. DO NOT EDIT.

package enuser

import (
	context "context"

	enuser "github.com/IbnAnjung/dealls/entity/enuser"
	mock "github.com/stretchr/testify/mock"
)

// MockUserUsecase is an autogenerated mock type for the UserUsecase type
type MockUserUsecase struct {
	mock.Mock
}

type MockUserUsecase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserUsecase) EXPECT() *MockUserUsecase_Expecter {
	return &MockUserUsecase_Expecter{mock: &_m.Mock}
}

// GetDatingUserProfile provides a mock function with given fields: ctx, userID
func (_m *MockUserUsecase) GetDatingUserProfile(ctx context.Context, userID string) (enuser.User, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetDatingUserProfile")
	}

	var r0 enuser.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (enuser.User, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) enuser.User); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Get(0).(enuser.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserUsecase_GetDatingUserProfile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDatingUserProfile'
type MockUserUsecase_GetDatingUserProfile_Call struct {
	*mock.Call
}

// GetDatingUserProfile is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
func (_e *MockUserUsecase_Expecter) GetDatingUserProfile(ctx interface{}, userID interface{}) *MockUserUsecase_GetDatingUserProfile_Call {
	return &MockUserUsecase_GetDatingUserProfile_Call{Call: _e.mock.On("GetDatingUserProfile", ctx, userID)}
}

func (_c *MockUserUsecase_GetDatingUserProfile_Call) Run(run func(ctx context.Context, userID string)) *MockUserUsecase_GetDatingUserProfile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUserUsecase_GetDatingUserProfile_Call) Return(users enuser.User, err error) *MockUserUsecase_GetDatingUserProfile_Call {
	_c.Call.Return(users, err)
	return _c
}

func (_c *MockUserUsecase_GetDatingUserProfile_Call) RunAndReturn(run func(context.Context, string) (enuser.User, error)) *MockUserUsecase_GetDatingUserProfile_Call {
	_c.Call.Return(run)
	return _c
}

// Swipe provides a mock function with given fields: ctx, input
func (_m *MockUserUsecase) Swipe(ctx context.Context, input enuser.SwipeUserInput) error {
	ret := _m.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for Swipe")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, enuser.SwipeUserInput) error); ok {
		r0 = rf(ctx, input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUserUsecase_Swipe_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Swipe'
type MockUserUsecase_Swipe_Call struct {
	*mock.Call
}

// Swipe is a helper method to define mock.On call
//   - ctx context.Context
//   - input enuser.SwipeUserInput
func (_e *MockUserUsecase_Expecter) Swipe(ctx interface{}, input interface{}) *MockUserUsecase_Swipe_Call {
	return &MockUserUsecase_Swipe_Call{Call: _e.mock.On("Swipe", ctx, input)}
}

func (_c *MockUserUsecase_Swipe_Call) Run(run func(ctx context.Context, input enuser.SwipeUserInput)) *MockUserUsecase_Swipe_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(enuser.SwipeUserInput))
	})
	return _c
}

func (_c *MockUserUsecase_Swipe_Call) Return(err error) *MockUserUsecase_Swipe_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockUserUsecase_Swipe_Call) RunAndReturn(run func(context.Context, enuser.SwipeUserInput) error) *MockUserUsecase_Swipe_Call {
	_c.Call.Return(run)
	return _c
}

// UpgradeToPremium provides a mock function with given fields: ctx, userID
func (_m *MockUserUsecase) UpgradeToPremium(ctx context.Context, userID string) error {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for UpgradeToPremium")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUserUsecase_UpgradeToPremium_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpgradeToPremium'
type MockUserUsecase_UpgradeToPremium_Call struct {
	*mock.Call
}

// UpgradeToPremium is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
func (_e *MockUserUsecase_Expecter) UpgradeToPremium(ctx interface{}, userID interface{}) *MockUserUsecase_UpgradeToPremium_Call {
	return &MockUserUsecase_UpgradeToPremium_Call{Call: _e.mock.On("UpgradeToPremium", ctx, userID)}
}

func (_c *MockUserUsecase_UpgradeToPremium_Call) Run(run func(ctx context.Context, userID string)) *MockUserUsecase_UpgradeToPremium_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUserUsecase_UpgradeToPremium_Call) Return(err error) *MockUserUsecase_UpgradeToPremium_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockUserUsecase_UpgradeToPremium_Call) RunAndReturn(run func(context.Context, string) error) *MockUserUsecase_UpgradeToPremium_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUserUsecase creates a new instance of MockUserUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserUsecase {
	mock := &MockUserUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
