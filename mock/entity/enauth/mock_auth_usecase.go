// Code generated by mockery v2.43.2. DO NOT EDIT.

package enauth

import (
	context "context"

	enauth "github.com/IbnAnjung/dealls/entity/enauth"
	mock "github.com/stretchr/testify/mock"
)

// MockAuthUsecase is an autogenerated mock type for the AuthUsecase type
type MockAuthUsecase struct {
	mock.Mock
}

type MockAuthUsecase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAuthUsecase) EXPECT() *MockAuthUsecase_Expecter {
	return &MockAuthUsecase_Expecter{mock: &_m.Mock}
}

// Login provides a mock function with given fields: ctx, input
func (_m *MockAuthUsecase) Login(ctx context.Context, input enauth.LoginInput) (enauth.LoginOutput, error) {
	ret := _m.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 enauth.LoginOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, enauth.LoginInput) (enauth.LoginOutput, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, enauth.LoginInput) enauth.LoginOutput); ok {
		r0 = rf(ctx, input)
	} else {
		r0 = ret.Get(0).(enauth.LoginOutput)
	}

	if rf, ok := ret.Get(1).(func(context.Context, enauth.LoginInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAuthUsecase_Login_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Login'
type MockAuthUsecase_Login_Call struct {
	*mock.Call
}

// Login is a helper method to define mock.On call
//   - ctx context.Context
//   - input enauth.LoginInput
func (_e *MockAuthUsecase_Expecter) Login(ctx interface{}, input interface{}) *MockAuthUsecase_Login_Call {
	return &MockAuthUsecase_Login_Call{Call: _e.mock.On("Login", ctx, input)}
}

func (_c *MockAuthUsecase_Login_Call) Run(run func(ctx context.Context, input enauth.LoginInput)) *MockAuthUsecase_Login_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(enauth.LoginInput))
	})
	return _c
}

func (_c *MockAuthUsecase_Login_Call) Return(output enauth.LoginOutput, err error) *MockAuthUsecase_Login_Call {
	_c.Call.Return(output, err)
	return _c
}

func (_c *MockAuthUsecase_Login_Call) RunAndReturn(run func(context.Context, enauth.LoginInput) (enauth.LoginOutput, error)) *MockAuthUsecase_Login_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterUser provides a mock function with given fields: ctx, input
func (_m *MockAuthUsecase) RegisterUser(ctx context.Context, input enauth.RegisterInput) (enauth.RegisterOutput, error) {
	ret := _m.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for RegisterUser")
	}

	var r0 enauth.RegisterOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, enauth.RegisterInput) (enauth.RegisterOutput, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, enauth.RegisterInput) enauth.RegisterOutput); ok {
		r0 = rf(ctx, input)
	} else {
		r0 = ret.Get(0).(enauth.RegisterOutput)
	}

	if rf, ok := ret.Get(1).(func(context.Context, enauth.RegisterInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAuthUsecase_RegisterUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterUser'
type MockAuthUsecase_RegisterUser_Call struct {
	*mock.Call
}

// RegisterUser is a helper method to define mock.On call
//   - ctx context.Context
//   - input enauth.RegisterInput
func (_e *MockAuthUsecase_Expecter) RegisterUser(ctx interface{}, input interface{}) *MockAuthUsecase_RegisterUser_Call {
	return &MockAuthUsecase_RegisterUser_Call{Call: _e.mock.On("RegisterUser", ctx, input)}
}

func (_c *MockAuthUsecase_RegisterUser_Call) Run(run func(ctx context.Context, input enauth.RegisterInput)) *MockAuthUsecase_RegisterUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(enauth.RegisterInput))
	})
	return _c
}

func (_c *MockAuthUsecase_RegisterUser_Call) Return(output enauth.RegisterOutput, err error) *MockAuthUsecase_RegisterUser_Call {
	_c.Call.Return(output, err)
	return _c
}

func (_c *MockAuthUsecase_RegisterUser_Call) RunAndReturn(run func(context.Context, enauth.RegisterInput) (enauth.RegisterOutput, error)) *MockAuthUsecase_RegisterUser_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAuthUsecase creates a new instance of MockAuthUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAuthUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAuthUsecase {
	mock := &MockAuthUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
