// Code generated by mockery v2.43.2. DO NOT EDIT.

package orm

import (
	context "context"

	gorm "gorm.io/gorm"

	mock "github.com/stretchr/testify/mock"
)

// MockGormUow is an autogenerated mock type for the GormUow type
type MockGormUow struct {
	mock.Mock
}

type MockGormUow_Expecter struct {
	mock *mock.Mock
}

func (_m *MockGormUow) EXPECT() *MockGormUow_Expecter {
	return &MockGormUow_Expecter{mock: &_m.Mock}
}

// Begin provides a mock function with given fields: ctx
func (_m *MockGormUow) Begin(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Begin")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockGormUow_Begin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Begin'
type MockGormUow_Begin_Call struct {
	*mock.Call
}

// Begin is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockGormUow_Expecter) Begin(ctx interface{}) *MockGormUow_Begin_Call {
	return &MockGormUow_Begin_Call{Call: _e.mock.On("Begin", ctx)}
}

func (_c *MockGormUow_Begin_Call) Run(run func(ctx context.Context)) *MockGormUow_Begin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockGormUow_Begin_Call) Return(_a0 error) *MockGormUow_Begin_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGormUow_Begin_Call) RunAndReturn(run func(context.Context) error) *MockGormUow_Begin_Call {
	_c.Call.Return(run)
	return _c
}

// Commit provides a mock function with given fields: ctx
func (_m *MockGormUow) Commit(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Commit")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockGormUow_Commit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Commit'
type MockGormUow_Commit_Call struct {
	*mock.Call
}

// Commit is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockGormUow_Expecter) Commit(ctx interface{}) *MockGormUow_Commit_Call {
	return &MockGormUow_Commit_Call{Call: _e.mock.On("Commit", ctx)}
}

func (_c *MockGormUow_Commit_Call) Run(run func(ctx context.Context)) *MockGormUow_Commit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockGormUow_Commit_Call) Return(_a0 error) *MockGormUow_Commit_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGormUow_Commit_Call) RunAndReturn(run func(context.Context) error) *MockGormUow_Commit_Call {
	_c.Call.Return(run)
	return _c
}

// GetDB provides a mock function with given fields:
func (_m *MockGormUow) GetDB() *gorm.DB {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetDB")
	}

	var r0 *gorm.DB
	if rf, ok := ret.Get(0).(func() *gorm.DB); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gorm.DB)
		}
	}

	return r0
}

// MockGormUow_GetDB_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDB'
type MockGormUow_GetDB_Call struct {
	*mock.Call
}

// GetDB is a helper method to define mock.On call
func (_e *MockGormUow_Expecter) GetDB() *MockGormUow_GetDB_Call {
	return &MockGormUow_GetDB_Call{Call: _e.mock.On("GetDB")}
}

func (_c *MockGormUow_GetDB_Call) Run(run func()) *MockGormUow_GetDB_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockGormUow_GetDB_Call) Return(_a0 *gorm.DB) *MockGormUow_GetDB_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGormUow_GetDB_Call) RunAndReturn(run func() *gorm.DB) *MockGormUow_GetDB_Call {
	_c.Call.Return(run)
	return _c
}

// Recovery provides a mock function with given fields: ctx
func (_m *MockGormUow) Recovery(ctx context.Context) {
	_m.Called(ctx)
}

// MockGormUow_Recovery_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Recovery'
type MockGormUow_Recovery_Call struct {
	*mock.Call
}

// Recovery is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockGormUow_Expecter) Recovery(ctx interface{}) *MockGormUow_Recovery_Call {
	return &MockGormUow_Recovery_Call{Call: _e.mock.On("Recovery", ctx)}
}

func (_c *MockGormUow_Recovery_Call) Run(run func(ctx context.Context)) *MockGormUow_Recovery_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockGormUow_Recovery_Call) Return() *MockGormUow_Recovery_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockGormUow_Recovery_Call) RunAndReturn(run func(context.Context)) *MockGormUow_Recovery_Call {
	_c.Call.Return(run)
	return _c
}

// Rollback provides a mock function with given fields: ctx
func (_m *MockGormUow) Rollback(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Rollback")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockGormUow_Rollback_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Rollback'
type MockGormUow_Rollback_Call struct {
	*mock.Call
}

// Rollback is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockGormUow_Expecter) Rollback(ctx interface{}) *MockGormUow_Rollback_Call {
	return &MockGormUow_Rollback_Call{Call: _e.mock.On("Rollback", ctx)}
}

func (_c *MockGormUow_Rollback_Call) Run(run func(ctx context.Context)) *MockGormUow_Rollback_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockGormUow_Rollback_Call) Return(_a0 error) *MockGormUow_Rollback_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGormUow_Rollback_Call) RunAndReturn(run func(context.Context) error) *MockGormUow_Rollback_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockGormUow creates a new instance of MockGormUow. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockGormUow(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockGormUow {
	mock := &MockGormUow{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
