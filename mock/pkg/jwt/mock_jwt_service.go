// Code generated by mockery v2.43.2. DO NOT EDIT.

package jwt

import (
	jwt "github.com/IbnAnjung/dealls/pkg/jwt"
	mock "github.com/stretchr/testify/mock"
)

// MockJwtService is an autogenerated mock type for the JwtService type
type MockJwtService struct {
	mock.Mock
}

type MockJwtService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockJwtService) EXPECT() *MockJwtService_Expecter {
	return &MockJwtService_Expecter{mock: &_m.Mock}
}

// GenerateAccessToken provides a mock function with given fields: claim
func (_m *MockJwtService) GenerateAccessToken(claim jwt.UserClaim) (string, error) {
	ret := _m.Called(claim)

	if len(ret) == 0 {
		panic("no return value specified for GenerateAccessToken")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(jwt.UserClaim) (string, error)); ok {
		return rf(claim)
	}
	if rf, ok := ret.Get(0).(func(jwt.UserClaim) string); ok {
		r0 = rf(claim)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(jwt.UserClaim) error); ok {
		r1 = rf(claim)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockJwtService_GenerateAccessToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateAccessToken'
type MockJwtService_GenerateAccessToken_Call struct {
	*mock.Call
}

// GenerateAccessToken is a helper method to define mock.On call
//   - claim jwt.UserClaim
func (_e *MockJwtService_Expecter) GenerateAccessToken(claim interface{}) *MockJwtService_GenerateAccessToken_Call {
	return &MockJwtService_GenerateAccessToken_Call{Call: _e.mock.On("GenerateAccessToken", claim)}
}

func (_c *MockJwtService_GenerateAccessToken_Call) Run(run func(claim jwt.UserClaim)) *MockJwtService_GenerateAccessToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(jwt.UserClaim))
	})
	return _c
}

func (_c *MockJwtService_GenerateAccessToken_Call) Return(token string, err error) *MockJwtService_GenerateAccessToken_Call {
	_c.Call.Return(token, err)
	return _c
}

func (_c *MockJwtService_GenerateAccessToken_Call) RunAndReturn(run func(jwt.UserClaim) (string, error)) *MockJwtService_GenerateAccessToken_Call {
	_c.Call.Return(run)
	return _c
}

// GenerateRefreshToken provides a mock function with given fields: claim
func (_m *MockJwtService) GenerateRefreshToken(claim jwt.UserClaim) (string, error) {
	ret := _m.Called(claim)

	if len(ret) == 0 {
		panic("no return value specified for GenerateRefreshToken")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(jwt.UserClaim) (string, error)); ok {
		return rf(claim)
	}
	if rf, ok := ret.Get(0).(func(jwt.UserClaim) string); ok {
		r0 = rf(claim)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(jwt.UserClaim) error); ok {
		r1 = rf(claim)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockJwtService_GenerateRefreshToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateRefreshToken'
type MockJwtService_GenerateRefreshToken_Call struct {
	*mock.Call
}

// GenerateRefreshToken is a helper method to define mock.On call
//   - claim jwt.UserClaim
func (_e *MockJwtService_Expecter) GenerateRefreshToken(claim interface{}) *MockJwtService_GenerateRefreshToken_Call {
	return &MockJwtService_GenerateRefreshToken_Call{Call: _e.mock.On("GenerateRefreshToken", claim)}
}

func (_c *MockJwtService_GenerateRefreshToken_Call) Run(run func(claim jwt.UserClaim)) *MockJwtService_GenerateRefreshToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(jwt.UserClaim))
	})
	return _c
}

func (_c *MockJwtService_GenerateRefreshToken_Call) Return(token string, err error) *MockJwtService_GenerateRefreshToken_Call {
	_c.Call.Return(token, err)
	return _c
}

func (_c *MockJwtService_GenerateRefreshToken_Call) RunAndReturn(run func(jwt.UserClaim) (string, error)) *MockJwtService_GenerateRefreshToken_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateToken provides a mock function with given fields: tokenString
func (_m *MockJwtService) ValidateToken(tokenString string) (*jwt.UserClaim, error) {
	ret := _m.Called(tokenString)

	if len(ret) == 0 {
		panic("no return value specified for ValidateToken")
	}

	var r0 *jwt.UserClaim
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*jwt.UserClaim, error)); ok {
		return rf(tokenString)
	}
	if rf, ok := ret.Get(0).(func(string) *jwt.UserClaim); ok {
		r0 = rf(tokenString)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*jwt.UserClaim)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(tokenString)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockJwtService_ValidateToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateToken'
type MockJwtService_ValidateToken_Call struct {
	*mock.Call
}

// ValidateToken is a helper method to define mock.On call
//   - tokenString string
func (_e *MockJwtService_Expecter) ValidateToken(tokenString interface{}) *MockJwtService_ValidateToken_Call {
	return &MockJwtService_ValidateToken_Call{Call: _e.mock.On("ValidateToken", tokenString)}
}

func (_c *MockJwtService_ValidateToken_Call) Run(run func(tokenString string)) *MockJwtService_ValidateToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockJwtService_ValidateToken_Call) Return(c *jwt.UserClaim, err error) *MockJwtService_ValidateToken_Call {
	_c.Call.Return(c, err)
	return _c
}

func (_c *MockJwtService_ValidateToken_Call) RunAndReturn(run func(string) (*jwt.UserClaim, error)) *MockJwtService_ValidateToken_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockJwtService creates a new instance of MockJwtService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockJwtService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockJwtService {
	mock := &MockJwtService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
