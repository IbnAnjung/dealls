// Code generated by mockery v2.43.2. DO NOT EDIT.

package time

import (
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// MockTime is an autogenerated mock type for the Time type
type MockTime struct {
	mock.Mock
}

type MockTime_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTime) EXPECT() *MockTime_Expecter {
	return &MockTime_Expecter{mock: &_m.Mock}
}

// GetDefaultLoc provides a mock function with given fields:
func (_m *MockTime) GetDefaultLoc() *time.Location {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetDefaultLoc")
	}

	var r0 *time.Location
	if rf, ok := ret.Get(0).(func() *time.Location); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*time.Location)
		}
	}

	return r0
}

// MockTime_GetDefaultLoc_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDefaultLoc'
type MockTime_GetDefaultLoc_Call struct {
	*mock.Call
}

// GetDefaultLoc is a helper method to define mock.On call
func (_e *MockTime_Expecter) GetDefaultLoc() *MockTime_GetDefaultLoc_Call {
	return &MockTime_GetDefaultLoc_Call{Call: _e.mock.On("GetDefaultLoc")}
}

func (_c *MockTime_GetDefaultLoc_Call) Run(run func()) *MockTime_GetDefaultLoc_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockTime_GetDefaultLoc_Call) Return(_a0 *time.Location) *MockTime_GetDefaultLoc_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTime_GetDefaultLoc_Call) RunAndReturn(run func() *time.Location) *MockTime_GetDefaultLoc_Call {
	_c.Call.Return(run)
	return _c
}

// GetLastTimeOnDay provides a mock function with given fields:
func (_m *MockTime) GetLastTimeOnDay() time.Time {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetLastTimeOnDay")
	}

	var r0 time.Time
	if rf, ok := ret.Get(0).(func() time.Time); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Time)
	}

	return r0
}

// MockTime_GetLastTimeOnDay_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLastTimeOnDay'
type MockTime_GetLastTimeOnDay_Call struct {
	*mock.Call
}

// GetLastTimeOnDay is a helper method to define mock.On call
func (_e *MockTime_Expecter) GetLastTimeOnDay() *MockTime_GetLastTimeOnDay_Call {
	return &MockTime_GetLastTimeOnDay_Call{Call: _e.mock.On("GetLastTimeOnDay")}
}

func (_c *MockTime_GetLastTimeOnDay_Call) Run(run func()) *MockTime_GetLastTimeOnDay_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockTime_GetLastTimeOnDay_Call) Return(_a0 time.Time) *MockTime_GetLastTimeOnDay_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTime_GetLastTimeOnDay_Call) RunAndReturn(run func() time.Time) *MockTime_GetLastTimeOnDay_Call {
	_c.Call.Return(run)
	return _c
}

// Now provides a mock function with given fields:
func (_m *MockTime) Now() time.Time {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Now")
	}

	var r0 time.Time
	if rf, ok := ret.Get(0).(func() time.Time); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Time)
	}

	return r0
}

// MockTime_Now_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Now'
type MockTime_Now_Call struct {
	*mock.Call
}

// Now is a helper method to define mock.On call
func (_e *MockTime_Expecter) Now() *MockTime_Now_Call {
	return &MockTime_Now_Call{Call: _e.mock.On("Now")}
}

func (_c *MockTime_Now_Call) Run(run func()) *MockTime_Now_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockTime_Now_Call) Return(_a0 time.Time) *MockTime_Now_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTime_Now_Call) RunAndReturn(run func() time.Time) *MockTime_Now_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTime creates a new instance of MockTime. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTime(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTime {
	mock := &MockTime{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
