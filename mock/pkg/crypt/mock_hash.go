// Code generated by mockery v2.43.2. DO NOT EDIT.

package crypt

import mock "github.com/stretchr/testify/mock"

// MockHash is an autogenerated mock type for the Hash type
type MockHash struct {
	mock.Mock
}

type MockHash_Expecter struct {
	mock *mock.Mock
}

func (_m *MockHash) EXPECT() *MockHash_Expecter {
	return &MockHash_Expecter{mock: &_m.Mock}
}

// CompareHash provides a mock function with given fields: hText, plainText
func (_m *MockHash) CompareHash(hText string, plainText string) error {
	ret := _m.Called(hText, plainText)

	if len(ret) == 0 {
		panic("no return value specified for CompareHash")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(hText, plainText)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockHash_CompareHash_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CompareHash'
type MockHash_CompareHash_Call struct {
	*mock.Call
}

// CompareHash is a helper method to define mock.On call
//   - hText string
//   - plainText string
func (_e *MockHash_Expecter) CompareHash(hText interface{}, plainText interface{}) *MockHash_CompareHash_Call {
	return &MockHash_CompareHash_Call{Call: _e.mock.On("CompareHash", hText, plainText)}
}

func (_c *MockHash_CompareHash_Call) Run(run func(hText string, plainText string)) *MockHash_CompareHash_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockHash_CompareHash_Call) Return(_a0 error) *MockHash_CompareHash_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockHash_CompareHash_Call) RunAndReturn(run func(string, string) error) *MockHash_CompareHash_Call {
	_c.Call.Return(run)
	return _c
}

// HashString provides a mock function with given fields: plainText
func (_m *MockHash) HashString(plainText string) (string, error) {
	ret := _m.Called(plainText)

	if len(ret) == 0 {
		panic("no return value specified for HashString")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(plainText)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(plainText)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(plainText)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockHash_HashString_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HashString'
type MockHash_HashString_Call struct {
	*mock.Call
}

// HashString is a helper method to define mock.On call
//   - plainText string
func (_e *MockHash_Expecter) HashString(plainText interface{}) *MockHash_HashString_Call {
	return &MockHash_HashString_Call{Call: _e.mock.On("HashString", plainText)}
}

func (_c *MockHash_HashString_Call) Run(run func(plainText string)) *MockHash_HashString_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockHash_HashString_Call) Return(hText string, err error) *MockHash_HashString_Call {
	_c.Call.Return(hText, err)
	return _c
}

func (_c *MockHash_HashString_Call) RunAndReturn(run func(string) (string, error)) *MockHash_HashString_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockHash creates a new instance of MockHash. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockHash(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockHash {
	mock := &MockHash{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
